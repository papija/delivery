const EMULATOR_DELAY = 500;

// –≠–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
const mockData = {
  '0000123': {
    status: '–í –ø—É—Ç–∏',
    startWarehouse: {
      lat: 52.544358,
      lon: 103.888249,
    },
    endWarehouse: {
      lat: 52.562000,
      lon: 103.899999,
    },
    coordsHistoryTemplate: [
      { offset: 0 * 60 * 1000, lat: 52.544358, lon: 103.888249 }, // 0 –º–∏–Ω
      { offset: 2 * 60 * 1000, lat: 52.547000, lon: 103.890000 },
      { offset: 4 * 60 * 1000, lat: 52.550000, lon: 103.893000 },
      { offset: 6 * 60 * 1000, lat: 52.553000, lon: 103.896000 },
      { offset: 8 * 60 * 1000, lat: 52.557000, lon: 103.898000 },
      { offset: 10 * 60 * 1000, lat: 52.562000, lon: 103.899999 }, // 10 –º–∏–Ω
    ],
  },
  '0000456': {
    status: '–ó–∞–≥—Ä—É–∂–µ–Ω',
    queueNumber: 3,
    startWarehouse: {
      lat: 52.544358,
      lon: 103.888249,
    },
    endWarehouse: {
      lat: 52.562000,
      lon: 103.899999,
    },
  },
};

let trackingStartTime = null;
let currentCustomCoords = null;

export default {
  async getOrderStatus(orderId, timestamp) {
    await new Promise((resolve) => setTimeout(resolve, EMULATOR_DELAY));

    const data = mockData[orderId];

    if (!data) {
      console.warn(`[EMULATOR] –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return { status: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–∫–∞–∑' };
    }

    // üîÅ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –≤–Ω–µ—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1–°)
    if (currentCustomCoords && typeof currentCustomCoords.lat === 'number' && typeof currentCustomCoords.lon === 'number') {
      console.log(`[EMULATOR] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${currentCustomCoords.lat}, ${currentCustomCoords.lon}]`);
      return {
        status: '–í –ø—É—Ç–∏',
        lat: currentCustomCoords.lat,
        lon: currentCustomCoords.lon,
        startWarehouse: data.startWarehouse,
        endWarehouse: data.endWarehouse,
      };
    }

    if (data.status === '–í –ø—É—Ç–∏') {
      const now = new Date(timestamp); // ‚úÖ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ timestamp ‚Äî Date
      if (isNaN(now.getTime())) {
        console.error('[EMULATOR] –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:', timestamp);
        return {
          status: '–í –ø—É—Ç–∏',
          lat: data.coordsHistoryTemplate[0].lat,
          lon: data.coordsHistoryTemplate[0].lon,
          startWarehouse: data.startWarehouse,
          endWarehouse: data.endWarehouse,
        };
      }

      const history = this.buildDynamicHistory(data, now);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º trackingStartTime –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
      if (!trackingStartTime) {
        trackingStartTime = now;
      }

      const startTime = trackingStartTime.getTime();
      const endTime = startTime + history[history.length - 1].offset;

      const elapsed = now.getTime() - startTime;

      // –ï—Å–ª–∏ –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
      if (elapsed <= 0) {
        return {
          status: '–í –ø—É—Ç–∏',
          lat: history[0].lat,
          lon: history[0].lon,
          startWarehouse: data.startWarehouse,
          endWarehouse: data.endWarehouse,
        };
      }

      if (elapsed >= history[history.length - 1].offset) {
        const last = history[history.length - 1];
        return {
          status: '–í –ø—É—Ç–∏',
          lat: last.lat,
          lon: last.lon,
          startWarehouse: data.startWarehouse,
          endWarehouse: data.endWarehouse,
        };
      }

      // üß≠ –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
      let i = 0;
      while (
        i < history.length - 1 &&
        elapsed > history[i + 1].offset
      ) {
        i++;
      }

      const pointA = history[i];
      const pointB = history[i + 1];

      if (!pointA || !pointB) {
        console.warn('[EMULATOR] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—á–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏', i, history);
        return {
          lat: data.startWarehouse.lat,
          lon: data.startWarehouse.lon,
          status: '–í –ø—É—Ç–∏',
          startWarehouse: data.startWarehouse,
          endWarehouse: data.endWarehouse,
        };
      }

      // üßÆ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
      const total = pointB.offset - pointA.offset;
      const ratio = total === 0 ? 0 : elapsed / total;

      const lat = pointA.lat + (pointB.lat - pointA.lat) * ratio;
      const lon = pointA.lon + (pointB.lon - pointA.lon) * ratio;

      // üîç –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—É
      console.log(`[EMULATOR] pointA:`, pointA);
      console.log(`[EMULATOR] pointB:`, pointB);
      console.log(`[EMULATOR] elapsed:`, elapsed);
      console.log(`[EMULATOR] ratio:`, ratio);
      console.log(`[EMULATOR] lat:`, lat, 'lon:', lon);

      return {
        status: '–í –ø—É—Ç–∏',
        lat,
        lon,
        startWarehouse: data.startWarehouse,
        endWarehouse: data.endWarehouse,
      };
    }

    if (data.status === '–ó–∞–≥—Ä—É–∂–µ–Ω') {
      return {
        status: '–ó–∞–≥—Ä—É–∂–µ–Ω',
        queueNumber: data.queueNumber,
        startWarehouse: data.startWarehouse,
        endWarehouse: data.endWarehouse,
      };
    }

    return { status: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω' };
  },

  // üß† –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç "—Å–µ–π—á–∞—Å"
  buildDynamicHistory(data, now) {
    const baseTime = now.getTime();

    return data.coordsHistoryTemplate.map((point) => ({
      time: new Date(baseTime + point.offset),
      lat: point.lat,
      lon: point.lon,
      offset: point.offset,
    }));
  },

  // üß™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1–°)
  setDriverCoords(lat, lon) {
    currentCustomCoords = { lat, lon };
    console.log(`[EMULATOR] –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: [${lat}, ${lon}]`);
  },

  // üß™ –°–±—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
  clearDriverCoords() {
    currentCustomCoords = null;
    trackingStartTime = null;
    console.log('[EMULATOR] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω—ã');
  }
};